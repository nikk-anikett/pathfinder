
///////////////
//////////    SAVED CSV OF EVERY MINUTE

const currentdate = new Date();
const date =
  currentdate.getFullYear() +
  "" +
  (currentdate.getMonth() + 1) +
  "" +
  currentdate.getDate();

const dataDir = path.join(__dirname, "/testing");
const csvFilePath = path.join(dataDir, `${date}.csv`);

if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir);
}

function createCSVFile() {
  if (!fs.existsSync(csvFilePath)) {
    const csvHeader =
      "Date, Time, ClientName, Symbol, Expirydate, LTP, Sys_Exp_Intra, Sys_Exp_Carry, Sys_Exp_Net, Exec_Exp_Net, ExpLimit_In_Cr\n";
    fs.writeFileSync(csvFilePath, csvHeader, { flag: "w" });
  }
}

function append_DataTable_To_CSV() {
  const currentdate = new Date();
  const date =
    currentdate.getFullYear() +
    "" +
    (currentdate.getMonth() + 1) +
    "" +
    currentdate.getDate();
  const time =
    currentdate.getHours() +
    "" +
    currentdate.getMinutes() +
    "" +
    currentdate.getSeconds();
  if (
    parseInt(currentdate.getHours()) > 8 &&
    parseInt(currentdate.getHours()) < 16
  ) {
    const jsonData = _.cloneDeep(dataTable_CSV);

    for (let row = 0; row < jsonData.length; row++) {
      jsonData[row]["date"] = date;
      jsonData[row]["time"] = time;
    }
    createCSVFile();

    const csvData =
      jsonData
        .map(
          (item) =>
            `${item.date},${item.time},${item.ClientName},${item.Symbol},${item.Expirydate},${item.LTP},${item.Sys_Exp_Intra},${item.Sys_Exp_Carry},${item.Sys_Exp_Net},${item.Exec_Exp_Net},${item.ExpLimit_In_Cr}`
        )
        .join("\n") + "\n";
    fs.appendFile(csvFilePath, csvData, (err) => {
      if (err) {
        console.error("Error appending data to CSV file:", err);
      }
      //  else {
      //   console.log("Data appended to CSV file.");
      // }
    });
  }
}

setInterval(append_DataTable_To_CSV, 60000)





const http = require('http');
const fs = require('fs');
const path = require('path');

const server = http.createServer((req, res) => {
  if (req.url === '/') {
    const indexPath = path.join(__dirname, 'index.html');
    const indexData = fs.readFileSync(indexPath, 'utf-8');
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(indexData);
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

const PORT = 3000;
server.listen(PORT, () => {
  console.log(`Server is running at http://localhost:${PORT}`);
});
https://visualstudio.microsoft.com/visual-cpp-build-tools/
