<!DOCTYPE html>
<html>
<head>
  <title>Fetch Data</title>
</head>
<body>
  <h1>Data Viewer</h1>
  <button onclick="fetchData('database1')">Fetch Data from Database 1</button>
  <button onclick="fetchData('database2')">Fetch Data from Database 2</button>
  
  <table>
    <thead>
      <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email</th>
      </tr>
    </thead>
    <tbody id="data">
      <!-- Data will be displayed here dynamically -->
    </tbody>
  </table>

  <script>
    function fetchData(database) {
      const dataContainer = document.getElementById('data');
      dataContainer.innerHTML = ''; // Clear previous data

      fetch(`/${database}`)
        .then(response => response.json())
        .then(data => {
          data.forEach(user => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${user.FirstName}</td>
              <td>${user.LastName}</td>
              <td>${user.Email}</td>
            `;
            dataContainer.appendChild(row);
          });
        })
        .catch(error => console.error('Error fetching data:', error));
    }

    // Fetch data initially and refresh every 5 seconds
    fetchData('database1');
    setInterval(() => {
      fetchData('database1');
    }, 5000); // 5000 milliseconds = 5 seconds
  </script>
</body>
</html>




<!DOCTYPE html>
<html>
<head>
  <title>Received Data</title>
</head>
<body>
  <h1>Received Data:</h1>
  <table border="1" id="dataTable">
    <thead>
      <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
  <script>
    function updateTable(data) {
      const tableBody = document.querySelector('#dataTable tbody');
      tableBody.innerHTML = '';

      data.forEach(row => {
        const newRow = tableBody.insertRow();
        newRow.insertCell().innerText = row.FirstName;
        newRow.insertCell().innerText = row.LastName;
        newRow.insertCell().innerText = row.Email;
      });
    }

    function fetchData() {
      fetch('/data')
        .then(response => response.json())
        .then(data => {
          updateTable(data);
        })
        .catch(error => {
          console.error('Error fetching data:', error);
        });
    }

    // Fetch data initially and refresh every 5 seconds
    fetchData();
    setInterval(fetchData, 5000);
  </script>
</body>
</html>



const express = require('express');
const dgram = require('dgram');
const http = require('http');
const WebSocket = require('ws');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

let receivedData = [];

server.listen(3000, () => {
  console.log('Web server listening on port 3000');
});

const udpServer = dgram.createSocket('udp4');
udpServer.on('message', (msg, rinfo) => {
  const jsonData = msg.toString('utf8');
  const dataObj = JSON.parse(jsonData);
  receivedData.push(dataObj);

  // Send the received data to all connected WebSocket clients
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(receivedData));
    }
  });

  console.log('Received data:', receivedData);
});
udpServer.on('listening', () => {
  const address = udpServer.address();
  console.log(`UDP server listening on ${address.address}:${address.port}`);
});
udpServer.on('error', (err) => {
  console.error('UDP server error:', err);
  udpServer.close();
});
udpServer.bind(15000);

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html');
});

app.get('/data', (req, res) => {
  res.json(receivedData);
});

<!DOCTYPE html>
<html>
<head>
  <title>Fetch Data</title>
</head>
<body>
  <h1>Data Viewer</h1>
  <button onclick="fetchData('database1')">Fetch Data from Database 1</button>
  <button onclick="fetchData('database2')">Fetch Data from Database 2</button>
  
  <table>
    <thead>
      <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email</th>
      </tr>
    </thead>
    <tbody id="data">
      <!-- Data will be displayed here dynamically -->
    </tbody>
  </table>

  <script>
    let currentDatabase = 'database1';

    function fetchData(database) {
      currentDatabase = database;
      const dataContainer = document.getElementById('data');
      dataContainer.innerHTML = ''; // Clear previous data

      fetch(`/${database}`)
        .then(response => response.json())
        .then(data => {
          data.forEach(user => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${user.FirstName}</td>
              <td>${user.LastName}</td>
              <td>${user.Email}</td>
            `;
            dataContainer.appendChild(row);
          });
        })
        .catch(error => console.error('Error fetching data:', error));
    }

    // Fetch data initially and refresh every 5 seconds
    fetchData(currentDatabase);
    setInterval(() => {
      fetchData(currentDatabase);
    }, 5000); // 5000 milliseconds = 5 seconds
  </script>
</body>
</html>



using System;
using System.Data;
using System.Linq;

class Program
{
    static void Main()
    {
        // Assuming you have two DataTables with the specified column names
        DataTable dt1 = GetFirstDataTable();
        DataTable dt2 = GetSecondDataTable();

        // Compare the DataTables and store the differences in a third DataTable
        DataTable diffTable = CompareDataTables(dt1, dt2);

        // Display the differences or use the diffTable as needed
        DisplayDataTable(diffTable);

        Console.ReadLine();
    }

    static DataTable CompareDataTables(DataTable dt1, DataTable dt2)
    {
        // Create a new DataTable with the same structure
        DataTable diffTable = dt1.Clone();

        // Compare the two DataTables using LINQ
        var differences = dt1.AsEnumerable().Except(dt2.AsEnumerable(), DataRowComparer.Default);

        // Copy the differences to the new DataTable
        foreach (DataRow row in differences)
        {
            diffTable.ImportRow(row);
        }

        return diffTable;
    }

    static void DisplayDataTable(DataTable table)
    {
        Console.WriteLine("Differences:");
        foreach (DataRow row in table.Rows)
        {
            foreach (DataColumn col in table.Columns)
            {
                Console.Write($"{col.ColumnName}: {row[col]} ");
            }
            Console.WriteLine();
        }
    }

    static DataTable GetFirstDataTable()
    {
        // Implement the logic to populate your first DataTable (dt1)
        // For example:
        DataTable dt1 = new DataTable();
        dt1.Columns.Add("machineid");
        dt1.Columns.Add("symbol");
        dt1.Columns.Add("exp");
        dt1.Columns.Add("time");
        dt1.Columns.Add("work");
        dt1.Columns.Add("start");
        dt1.Columns.Add("sig");
        dt1.Columns.Add("sour");
        dt1.Columns.Add("uid");
        dt1.Columns.Add("sys");
        dt1.Columns.Add("syst");

        // Add sample data
        dt1.Rows.Add(1, "A", "2022-01-01", "12:00", "Work1", "Start1", "Sig1", "Sour1", 101, "Sys1", "Syst1");
        dt1.Rows.Add(2, "B", "2022-01-02", "14:00", "Work2", "Start2", "Sig2", "Sour2", 102, "Sys2", "Syst2");

        return dt1;
    }

    static DataTable GetSecondDataTable()
    {
        // Implement the logic to populate your second DataTable (dt2)
        // For example:
        DataTable dt2 = new DataTable();
        dt2.Columns.Add("machineid");
        dt2.Columns.Add("symbol");
        dt2.Columns.Add("exp");
        dt2.Columns.Add("time");
        dt2.Columns.Add("work");
        dt2.Columns.Add("start");
        dt2.Columns.Add("sig");
        dt2.Columns.Add("sour");
        dt2.Columns.Add("uid");
        dt2.Columns.Add("sys");
        dt2.Columns.Add("syst");

        // Add sample data (making some differences)
        dt2.Rows.Add(1, "A", "2022-01-01", "12:00", "Work1", "Start1", "Sig1", "Sour1", 101, "Sys1", "Syst1");
        dt2.Rows.Add(3, "C", "2022-01-03", "16:00", "Work3", "Start3", "Sig3", "Sour3", 103, "Sys3", "Syst3");

        return dt2;
    }
}




// package.json
{
  "name": "my-node-project",
  "version": "1.0.0",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "^4.17.1"
  },
  "pkg": {
    "scripts": "app.js",
    "assets": ["index.html", "public/**/*"]
  }
}

// app.js
const express = require('express');
const path = require('path');
const app = express();
const port = 3000;

// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, 'public')));

// Serve the index.html file
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

const server = app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});



// public/client.js
console.log('Client-side JavaScript is running!');





/* public/style.css */
body {
  font-family: Arial, sans-serif;
  text-align: center;
}

h1 {
  color: #007BFF;
}





<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="public/style.css">
  <title>Node.js Project</title>
</head>
<body>
  <h1>Hello, Node.js!</h1>
  <script src="public/client.js"></script>
</body>
</html>


